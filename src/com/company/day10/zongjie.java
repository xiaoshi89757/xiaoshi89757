package com.company.day10;
/*
* 单例模式 让设计的类只能创建一个对象
* 饿汉式 &懒汉式
* mian()是一个方法 主方法
* 权限修饰符 public protected 缺省 private 面向对象的封装性
* 对于方法来讲 static final abstract
* void/具体的返回值类型 （基本数据类型&引用数据类型） 返回值
* 方法名 ：xxxYyyZzz
* 形参列表 ：同一个类中同一个方法名不同的形参列表的诸多个方法之间构成重载
* 方法体：方法定义的一种功能 具体的实现由方法体操作
* 属性赋值的操作 1）默认的初始化2）显示的初始化 或代码块的初始化 顺序执行
* 3）构造器中 4）通过方法对对象的相应属性进行修改
*
* final:最终的，可以用来修饰类、属性、方法
*
* 1.final修饰类，这个类不能被继承：String StringBuffer System
*
* 2.final修饰方法，不能被重写 Object 的getClass
*
* 3.final修饰属性，此属性就是一个常量，习惯上用大写字符表示 初始化后不可再被赋值
* 1）常量不能使用默认初始化 2）可以显示的赋值
*
* 变量用static final 修饰：全局常量 比如math.PI
*abstract:抽象的 可以用来修饰类，方法
 *
 * 1.abstract修饰类，抽象类
 * 1）不可被实例化 但是有构造器  凡是类都有构造器
 *  抽象方法所在的类一定是抽象类 抽象类中可以没有抽象方法
 *
 * 2.abstract修饰方法：抽象方法
 * 没有方法体，包括{} public abstract void eat();
 * 抽象方法只保留方法的功能，而具体的执行，交给继承抽象类的子类，
 * 若子类继承抽象类，并重写了所有的抽象方法，则此类的是一个实体类，可以实例化
 * 若子类继承抽象类，并没有重写所有的抽象方法，意味着此类中还有抽象方法 则此类必须声明为抽象类
 *
* */
public class zongjie {
}
